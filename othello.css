#offlineRibbon {
  height: 4vmin;
  font-size: 4vmin;
  line-height: 4vmin;
  vertical-align: middle;
  text-align: center;

  position: absolute;
  width: 30vmin;
  top: 7vmin;
  left: -6vmin;

  transform: rotate(-45deg);
  transform-origin: center center;

  background-color: red;
  font-weight: bold;
  color: white;
  filter: drop-shadow(2px 4px 6px black);
}

#offlineRibbon:not(.show) {
  display: none;
}

#board {
  display: grid;
  grid-template: repeat(8, 1fr) / repeat(8, 1fr);
  width: 80vmin;

  border: 0.15vmin solid black;
  box-sizing: border-box;
}

.square {
  background-color: green;
  width: 10vmin;
  height: 10vmin;

  border: 0.15vmin solid black;
  box-sizing: border-box;
  line-height: 0; /* Fixes minor positioning weirdness for svg at zoom */
}

#score {
  margin-bottom: 1vmin;
}

.score-wrapper {
  display: inline-block;
  width: 40vmin;
  text-align: center;
}

.score-wrapper .stone-container {
  width: 10vmin;
  height: 10vmin;

  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

.score-text {
  display: inline-block;
}

.score-text:before {
  content: ":";
}

.score-text,
.score-text:before {
  font-size: 10vmin;
  line-height: 10vmin;
  vertical-align: top;
}

.turn {
  filter: drop-shadow(-1vmin 1vmin 1vmin blue);
}

.msg-container {
  position: absolute;
  display: inline-block;
  font-size: 3vmin;
  font-weight: bold;
}

.black .msg-container {
  color: white;
}

.pass .msg-container:before {
  content: "PASS";
}

.win .msg-container:before {
  content: "WIN";
}

.tie .msg-container:before {
  content: "TIE";
}

.bailed .msg-container:before {
  content: "GONE";
}

.tie,
.win {
  filter: drop-shadow(-1vmin 1vmin 1vmin red);
}

.bailed {
  filter: drop-shadow(-1vmin 1vmin 1vmin green);
}

svg {
  width: 100%;
  height: 100%;
}

.stone {
  transform-origin: 50% 50%;

  fill: none;
  stroke: none;
  stroke-width: 1px;  /* In SVG coordinates, not page coordinates. */
}

.black .stone {
  fill: black;
  stroke: white;
}

.white .stone {
  fill: white;
  stroke: black;
}

.black.flip .stone {
  animation: flip-black 1s ease-in-out;
}

.white.flip .stone {
  animation: flip-white 1s ease-in-out;
}

.indicator {
  fill: none;
  stroke: none;
}

.last .indicator {
  fill: red;
}

.valid .indicator {
  fill: rgba(0, 0, 0, 0.5);
}

@keyframes flip-white {
  0% {
    transform: scaleX(1);
    fill: black;
    stroke: white;
  }
  50% {
    transform: scaleX(0);
    fill: black;
    stroke: white;
  }
  50.001% {
    transform: scaleX(0);
    fill: white;
    stroke: black;
  }
  100% {
    transform: scaleX(1);
    fill: white;
    stroke: black;
  }
}

@keyframes flip-black {
  0% {
    transform: scaleX(1);
    fill: white;
    stroke: black;
  }
  50% {
    transform: scaleX(0);
    fill: white;
    stroke: black;
  }
  50.001% {
    transform: scaleX(0);
    fill: black;
    stroke: white;
  }
  100% {
    transform: scaleX(1);
    fill: black;
    stroke: white;
  }
}

.animated-text {
  animation: animate-text 0.6s ease-in-out;
}

@keyframes animate-text {
  0% {
    transform: scale(1, 1);
  }
  50% {
    transform: scale(1.4, 1.4);
  }
  100% {
    transform: scale(1, 1);
  }
}

button {
  background-color: white;
  border: black solid 0.15vmin;
  border-radius: 4vmin;
  height: 8vmin;
  font-size: 5vmin;

  padding: 0 4vmin;
}

#resetButton,
#remoteButton {
  margin-top: 4vmin;
}

#appContainer {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: center;
}

#gameContainer,
#p2pContainer,
#idContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

#p2pContainer {
  margin-top: 4vmin;
}

#p2pContainer:not(.show) {
  display: none;
}

#idContainer:not(.show) {
  display: none;
}

label,
input[type=text] {
  font-size: 3vmin;
}

input[type=text] {
  width: 30vmin;
  margin-bottom: 5vmin;
}

#videoContainer {
  position: relative;
  line-height: 0;
  margin-bottom: 2vmin;
}

video#friend {
  width: 40vmin;
  height: 40vmin;
  background-color: black;
}

video#me {
  width: 10vmin;
  height: 10vmin;
  background-color: green;

  position: absolute;
  bottom: 0;
  right: 0;
}

@media (orientation: portrait) {
  #appContainer {
    flex-direction: column;
    align-items: center;
  }
}

@media (orientation: landscape) {
  #p2pContainer {
    margin-left: 20vmin;
  }
}

#remoteButton:not(.show) {
  display: none;
}

#closeRtcButton,
#muteButton {
  width: 5vmin;
  height: 5vmin;
  padding: 0;

  position: absolute;

  background-color: white;
  background-repeat: no-repeat;
  background-position: center center;
  background-size: 90%;
}

#muteButton {
  bottom: 0;
  left: 0;
}

#muteButton[muted=true] {
  background-image: url(volume_off.svg);
}

#muteButton[muted=false] {
  background-image: url(volume_up.svg);
}

#closeRtcButton {
  top: 0;
  right: 0;

  background-image: url(close.svg);
}
